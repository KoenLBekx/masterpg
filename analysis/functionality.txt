masterpg.js composes files - meant to be html files - as an alternative to the missing <include> tag feature in HTML files.

It processes five kinds of tags in an input file :

<+output [filename]/> : indicates to which file the result of the composition operation has to be written.

<+master [filename]/> : indicates that a file with filename is to be used as master page. If the filename doesn't contain a full path, it is looked for in the directory of the input file.

<+placeholder [label]/> : indicates that this placeholder in a master page has to be replaced by the content of an actual tag in the input file
(or the other way around or both in the same file ...);

<+actual [label]>...</+actual> : the actual content to replace a placeholder having the same label.

<+comment></comment> : will be removed from the output.

<+calc [label] [operator] [actualOperand1] [actualOperand2]/> : performs a calculation : it applies the operator +, -, * or / on two operands the labels of which are the labels of an +actual tag, and replaces the <+calc/> tag with a new actual tag having the same label. (Therefore, a <+calc/> tag cannot have the same label as a pre-existing <+actual> tag.) This resulting <+actual> tag can also be referenced by <+placeholder> tags.
If one of the actualOperand labels is a literal numerical expression, it is used as such without any lookup in an actual.
No units may be included in the operands : 10 is allowed, but not 10px.
e.g.:
<+calc largeDivHeight * divHeight 2/>
<+actual goldenCut 1.618034/>
<+calc largeDivWidth / divHeight goldenCut />

A <+calc/> tag, when evaluated, will be replaced by an <+/actual label>result</+actual> tag, except when the label (the first word after <+calc) is "-" :

<+actual price>200</+actual>
<+actual commission>20</+actual>
<+actual taxRate>0.20</+actual>
<+calc amount + price commission/> ---> <+actual amount>220</+actual>
<+calc tax * amount taxRate/> ---> <+actual>44</+actual>
<+calc ! + amount tax/> ---> 264

A placeholder operand in a <+calc/> tag cannot precede the <+actual> or <+calc/> tag providing its value.

<+actual price>200</+actual>
<+calc amount + price commission/> ---> Error ! Value of commission is unknown.
<+actual commission>20</+actual>


Note that these tags are case-insensitive.


masterpg.js works by :

- handling all files corresponding to a name containing wildcards, given as the input parameter of [nodejs masterpg.js '...'] command.
NOTE THAT THIS PARAMETER HAS TO BE ENCLOSED IN SINGLE QUOTES WHEN USED ON A *U*X SYSTEM !

- the rest of the steps are executed per inputfile found :

- finding the first <+output> tag and storing the output file path in a variable;

- then reading an input file in a string and replacing all <+master />-tags in this string with the content of the entire file indicated, and even doing this recursively, so even master page files can contain their own <+master />-tages;

- then, in the resulting string, replacing all <+calc> tags with <+actual> tags holding the calculated value. This replacement is done in the order in which the <+calc> tags appear in the string.

- then, in the resulting string, replacing all <+placeholder> tags with the content of the corresponding <+actual> tags;

- then, removing all the <+...> tags (should only be +comment, +output and +actual);

- finally, writing the result to the file in the first <+output> tag, overwriting existing files.


As a convention, which is not enforced by the program, you could use the below file name extensions :

- *.mpm for master pages;
- *.mpc for master page consumers (or clients), having an <+master .../> tag;
- *.mpx for files that both serve as a master page and consume one themselves.

Note that only the name of the final consumer file (or files, using wildcards) has to be passed as the first argument to the command

nodejs masterpg.js '<consumer file(s)>'


EXAMPLE :

-------------------- given test.mpc :

<+output test.html />
<+master testmid.mpx />
<+actual pageTitle>
	Test page 1
</+actual>
<+actual div1>
	<div>Well, this is div 1.</div>
</+actual>
<+actual div2>
	<div>And this is div 2.</div>
</+actual>

-------------------- given testmid.mpx :

<+master test.mpm />
<+actual body>
	<+placeholder div1/>
	<+placeholder div2/>
</+actual>

-------------------- given test.mpm :

<!DOCTYPE HTML>
<HTML>
<HEAD>
	<title><+placeholder pageTitle/></title>
</HEAD>
<BODY>
	<+placeholder body />
</BODY>
</HTML>

--------------------

Then the command
	nodejs masterpg.js 'test.mpc'

creates the file
-------------------- test.html :

<!DOCTYPE HTML>
<HTML>
<HEAD>
	<title>	Test page 1
</title>
</HEAD>
<BODY>
			<div>Well, this is div 1.</div>
		<div>And this is div 2.</div>
</BODY>
</HTML>

--------------------
